{"version":3,"sources":["components/TableRow.js","components/Table.js","components/Navbar.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","props","results","map","e","src","picture","thumbnail","alt","name","last","first","gender","dob","age","Table","className","scope","data","onClick","handleSort","Navbar","value","onChange","type","placeholder","TableContainer","state","employee","asc","lastName","sort","arr","a","b","setState","handleInputChange","event","target","newMap","JSON","parse","stringify","emp","filter","toUpperCase","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q/mBAmBeA,EAjBE,SAACC,GACd,OACI,oCACMA,EAAMC,QAAQC,KAAI,SAAAC,GAAC,OACjB,4BACI,4BAAI,yBAAKC,IAAKD,EAAEE,QAAQC,UAAWC,IAAKJ,EAAEK,KAAKC,QAC/C,4BAAKN,EAAEK,KAAKC,MACZ,4BAAKN,EAAEK,KAAKE,OACZ,4BAAKP,EAAEQ,QACP,4BAAKR,EAAES,IAAIC,WCWhBC,EAnBD,SAACd,GACX,OACI,2BAAOe,UAAU,SACb,+BACI,4BACI,wBAAIC,MAAM,MAAMC,KAAK,YAAYC,QAASlB,EAAMmB,YAAhD,SACA,wBAAIH,MAAM,MAAMC,KAAK,YAAYC,QAASlB,EAAMmB,YAAhD,QACA,wBAAIH,MAAM,MAAMC,KAAK,aAAaC,QAASlB,EAAMmB,YAAjD,SACA,wBAAIH,MAAM,MAAMC,KAAK,SAASC,QAASlB,EAAMmB,YAA7C,UACA,wBAAIH,MAAM,MAAMC,KAAK,UAAUC,QAASlB,EAAMmB,YAA9C,SAGR,+BACI,kBAAC,EAAD,CAAUlB,QAASD,EAAMiB,U,OCK1BG,EAnBA,SAACpB,GACZ,OACI,yBAAKe,UAAU,gCACX,0BAAMA,UAAU,eACZ,2BACAA,UAAU,uBACNM,MAAOrB,EAAMqB,MACbb,KAAMR,EAAMQ,KACZc,SAAUtB,EAAMsB,SAChBC,KAAMvB,EAAMuB,KACZC,YAAaxB,EAAMwB,cAGvB,4BAAQT,UAAU,uCAAuCQ,KAAK,UAA9D,aCyDDE,E,4MAjEXC,MAAQ,CACJC,SAAUA,EACVC,KAAK,EACLC,SAAU,I,EAGdC,KAAO,SAACC,EAAKH,GACLA,EACAG,EAAID,MAAK,SAACE,EAAGC,GACT,OAAID,EAAExB,KAAKC,KAAOwB,EAAEzB,KAAKC,MACb,EAERuB,EAAExB,KAAKC,KAAOwB,EAAEzB,KAAKC,KACd,EAEJ,KAGXsB,EAAID,MAAK,SAACE,EAAGC,GACT,OAAID,EAAExB,KAAKC,KAAOwB,EAAEzB,KAAKC,MACb,EAERuB,EAAExB,KAAKC,KAAOwB,EAAEzB,KAAKC,KACd,EAEJ,M,EAKnBU,WAAa,WACT,IAAIS,EAAM,EAAKF,MAAME,IACrB,EAAKM,SAAS,CACVP,SAAU,EAAKG,KAAKH,EAAUC,GAC9BA,KAAMA,K,EAIdO,kBAAoB,SAAAC,GAChB,IAAMf,EAAQe,EAAMC,OAAOhB,MAC3B,EAAKa,SAAS,CAAEL,SAAUR,IAC1B,IAAIiB,EAASC,KAAKC,MAAMD,KAAKE,UAAUC,IACvCJ,EAAS,EAAKZ,MAAMC,SAASgB,QAAO,SAAAxC,GAAC,OAAIA,EAAEK,KAAKC,KAAKmC,cAChDC,SAAS,EAAKnB,MAAMG,SAASe,kBAClC,EAAKV,SAAS,CAAEP,SAAUW,K,uDAI1B,OACI,oCACI,kBAAC,EAAD,CACIjB,MAAOyB,KAAKpB,MAAMG,SAClBrB,KAAK,WACLc,SAAUwB,KAAKX,kBACfZ,KAAK,OACLC,YAAY,wBAEhB,yBAAKT,UAAU,kBACX,kBAAC,EAAD,CAAOE,KAAMU,EAAUR,WAAY2B,KAAK3B,mB,GA3D/B4B,aCKdC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3a6af276.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TableRow = (props) => {\r\n    return (\r\n        <>\r\n            { props.results.map(e => (\r\n                <tr>\r\n                    <td><img src={e.picture.thumbnail} alt={e.name.last} /></td>\r\n                    <td>{e.name.last}</td>\r\n                    <td>{e.name.first}</td>\r\n                    <td>{e.gender}</td>\r\n                    <td>{e.dob.age}</td>\r\n                </tr>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TableRow;","import React from \"react\";\r\nimport TableRow from \"./TableRow\"\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" data=\"name.last\" onClick={props.handleSort}>Photo</th>\r\n                    <th scope=\"col\" data=\"name.last\" onClick={props.handleSort}>Last</th>\r\n                    <th scope=\"col\" data=\"name.first\" onClick={props.handleSort}>First</th>\r\n                    <th scope=\"col\" data=\"gender\" onClick={props.handleSort}>Gender</th>\r\n                    <th scope=\"col\" data=\"dob.age\" onClick={props.handleSort}>Age</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <TableRow results={props.data} />\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <form className=\"form-inline\">\r\n                <input \r\n                className=\"form-control mr-sm-2\"\r\n                    value={props.value}\r\n                    name={props.name}\r\n                    onChange={props.onChange}\r\n                    type={props.type}\r\n                    placeholder={props.placeholder}\r\n                    \r\n                />\r\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./Table\";\r\nimport employee from \"./employee.json\";\r\nimport emp from \"./employee.json\";\r\nimport Navbar from \"./Navbar\";\r\n\r\nclass TableContainer extends Component {\r\n    state = {\r\n        employee: employee,\r\n        asc: true,\r\n        lastName: \"\"\r\n    }\r\n\r\n    sort = (arr, asc) => {\r\n        if (asc) {\r\n            arr.sort((a, b) => {\r\n                if (a.name.last < b.name.last) {\r\n                    return -1;\r\n                }\r\n                if (a.name.last > b.name.last) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            })\r\n        } else {\r\n            arr.sort((a, b) => {\r\n                if (a.name.last > b.name.last) {\r\n                    return -1;\r\n                }\r\n                if (a.name.last < b.name.last) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            })\r\n        }\r\n    };\r\n\r\n    handleSort = () => {\r\n        let asc = this.state.asc;\r\n        this.setState({\r\n            employee: this.sort(employee, asc),\r\n            asc: !asc\r\n        });\r\n    };\r\n\r\n    handleInputChange = event => {\r\n        const value = event.target.value;\r\n        this.setState({ lastName: value });\r\n        let newMap = JSON.parse(JSON.stringify(emp));\r\n        newMap = this.state.employee.filter(e => e.name.last.toUpperCase()\r\n            .includes(this.state.lastName.toUpperCase()));\r\n        this.setState({ employee: newMap });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar\r\n                    value={this.state.lastName}\r\n                    name=\"lastName\"\r\n                    onChange={this.handleInputChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Search By Last Name\"\r\n                />\r\n                <div className=\"container mt-5\">\r\n                    <Table data={employee} handleSort={this.handleSort} />\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TableContainer;\r\n\r\n","import React from 'react';\r\nimport TableContainer from \"./components/TableContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <TableContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}